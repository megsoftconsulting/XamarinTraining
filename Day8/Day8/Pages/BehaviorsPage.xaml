<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:local="clr-namespace:Day8.Behaviors"
    BackgroundColor="White"
    Title="Behaviors"
    x:Class="Day8.Pages.BehaviorsPage">
    <ContentPage.Content>
        <ScrollView>
            <StackLayout Padding="20" Spacing="15">
                <Label Text="Description" FontAttributes="Bold" FontSize="Subtitle" />
                <Label Text="Behaviors allows you to add functionality to controls in the user interface without creating a subclass from a control. The behavior functionality is attached to the control like if it's part of it." 
                       FontSize="Body" />
                <Label Text="Sample 1" FontSize="Caption" FontAttributes="Bold" />
                <Label Text="In this sample, We add a behavior tha validates if the value introduced it's a number" 
                       FontSize="Body" />
                <Entry Placeholder="Enter a Number" local:NumericValidationBehavior.AttachBehavior="true" />
                <Label Text="Sample 2" FontSize="Caption" FontAttributes="Bold" />
                <Label Text="In this sample, We add a behavior that changes the background color if the user writes &quot;root&quot;" 
                       FontSize="Body" />
                <Entry>
                    <Entry.Behaviors>
                        <local:MyInputBehavior ErrorColor="Yellow" />
                    </Entry.Behaviors>
                </Entry>
                <Label Text="Note (Advanced): In advanced applications, a ListView/CollectionView in a MVVM architecture can't comunicate directly to our ViewModel due to a lack of a bindable event that can allow us to send the parameters We require to send back to our VM.&#x0a;&#x0a;This can be solved using a EventToCommandBehavior that allows to bind a event (like ItemTapped in ListView) to a Command in our VM. More information:" 
                       FontSize="Small" />
                <Label Text="Click here to know more about this behavior!" 
                       FontAttributes="Bold" 
                       FontSize="Small">
                    <Label.GestureRecognizers>
                        <TapGestureRecognizer Tapped="Url_Tapped" />
                    </Label.GestureRecognizers>
                </Label>
            </StackLayout>
        </ScrollView>
    </ContentPage.Content>
</ContentPage>
